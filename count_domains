LOG_FILE_CONTENT = """
*.amazon.co.uk    89
*.doubleclick.net    139
*.fbcdn.net    212
*.in-addr.arpa    384
*.l.google.com    317
1.client-channel.google.com    110
6.client-channel.google.com    45
a.root-servers.net    1059
apis.google.com    43
clients4.google.com    71
clients6.google.com    81
connect.facebook.net    68
edge-mqtt.facebook.com    56
graph.facebook.com    150
mail.google.com    128
mqtt-mini.facebook.com    47
ssl.google-analytics.com    398
star-mini.c10r.facebook.com    46
staticxx.facebook.com    48
www.facebook.com    178
www.google.com    162
www.google-analytics.com    127
www.googleapis.com    87
"""

def count_domains(log_file, min_hits):
	log_file_split = log_file.strip().split('\n')  # split log file into lines
	log_domain = {}  # create dictionary
	
	for line in log_file_split:
		domain, hits = line.split()
		hits = int(hits)  # convert hits to integer
		if hits >= min_hits:
			log_domain[domain] = hits
	
	return log_domain

def main():
	print("LOG_FILE_CONTENT:")
	print(LOG_FILE_CONTENT)
	
	# Initial test with min_hits = 100
	min_hits = 100
	domain_hits = count_domains(LOG_FILE_CONTENT, min_hits)
	print(f"\nDomains with hits greater than or equal to {min_hits}:")
	for domain, hits in domain_hits.items():
		print(f"{domain}: {hits}")
	
	# Call count_domains with min_hits = 500
	min_hits = 500
	domain_hits_500 = count_domains(LOG_FILE_CONTENT, min_hits)
	print(f"\nDomains with hits greater than or equal to {min_hits}:")
	for domain, hits in domain_hits_500.items():
		print(f"{domain}: {hits}")

if __name__ == "__main__":
	main()
